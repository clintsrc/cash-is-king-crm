# Test Check
#
# Validate all PRs on the develop branch to ensure the code is in a healthy state
# before it can be merged into main. The script can be monitored on a pull request's
# Checks tab, and the Summary menu option will show the cypress test summary
#
# Note: the key to the report summary magic is $GITHUB_STEP_SUMMARY!
#
# refs:
#   https://docs.cypress.io/app/continuous-integration/github-actions
#   https://github.blog/news-insights/product-news/supercharging-github-actions-with-job-summaries/
#   https://emojipedia.org/
#
name: Run Application Tests

on:
  # Trigger for any pull request activity on the develop branch (create, update)
  pull_request:
    branches:
      - develop

jobs:
  cypress-run:
    # Emergency toggle, since these tests were implemented shortly after mvp!
    if: ${{ true }}
    # This name should be added to GitHub's 'specific checks' branch protection config
    name: Checking Tests
    runs-on: ubuntu-latest

    # Setup a mongodb server
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: --health-cmd "exit 0" --health-interval 10s --health-timeout 5s --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Compile
        # TypeScript transpile
        run: npm run build

      - name: Seed the database
        run: npm run seed

      - name: Start MongoDB
        run: |
          # Ensure MongoDB is up and running before proceeding
          docker ps

      - name: Start the client
        run: npm run client:dev &  # Background the client process

      - name: Start the server
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          MONGODB_URI: 'mongodb://127.0.0.1:27017/cash_is_king_db'
        run: npm run start &  # Background the server process

      - name: Run Cypress component tests
        run: npm run test:comp
        continue-on-error: true # Continue on in order to report failed tests

      - name: Run Cypress E2E tests
        run: npx cypress run --e2e --headless
        continue-on-error: true # Continue on in order to report failed tests

      # Save the downloadable reports artifact for any further investigation
      - name: Upload Cypress component report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-component-report
          path: cypress/reports/component/mochawesome.json

      - name: Upload Cypress E2E report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-e2e-report
          path: cypress/reports/e2e/mochawesome.json

      - name: Display Cypress component test Job Summary
        if: always()
        run: |
          COMPONENT_RESULTS=$(cat cypress/reports/component/mochawesome.json)
          COMPONENT_PASSED=$(echo $COMPONENT_RESULTS | jq '.stats.passes')
          COMPONENT_FAILED=$(echo $COMPONENT_RESULTS | jq '.stats.failures')
          COMPONENT_PENDING=$(echo $COMPONENT_RESULTS | jq '.stats.pending')
          COMPONENT_SKIPPED=$(echo $COMPONENT_RESULTS | jq '.stats.skipped')
          COMPONENT_DURATION=$(echo $COMPONENT_RESULTS | jq '.stats.duration')

          COMPONENT_DURATION=$(echo "scale=3; $COMPONENT_DURATION / 1000" | bc)

          echo "## Cypress Component Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Result  | Passed ‚úÖ | Failed ‚ùå | Pending ü§ö | Skipped ‚Ü©Ô∏è | Duration üïó |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----------|---------|---------|---------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Component Tests | $COMPONENT_PASSED   | $COMPONENT_FAILED | $COMPONENT_PENDING | $COMPONENT_SKIPPED | ${COMPONENT_DURATION}s |" >> $GITHUB_STEP_SUMMARY

      - name: Display Cypress E2E test Job Summary
        if: always()
        run: |
          E2E_RESULTS=$(cat cypress/reports/e2e/mochawesome.json)
          E2E_PASSED=$(echo $E2E_RESULTS | jq '.stats.passes')
          E2E_FAILED=$(echo $E2E_RESULTS | jq '.stats.failures')
          E2E_PENDING=$(echo $E2E_RESULTS | jq '.stats.pending')
          E2E_SKIPPED=$(echo $E2E_RESULTS | jq '.stats.skipped')
          E2E_DURATION=$(echo $E2E_RESULTS | jq '.stats.duration')

          E2E_DURATION=$(echo "scale=3; $E2E_DURATION / 1000" | bc)

          echo "## Cypress E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Result  | Passed ‚úÖ | Failed ‚ùå | Pending ü§ö | Skipped ‚Ü©Ô∏è | Duration üïó |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----------|---------|---------|---------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | $E2E_PASSED   | $E2E_FAILED | $E2E_PENDING | $E2E_SKIPPED | ${E2E_DURATION}s |" >> $GITHUB_STEP_SUMMARY

      # Fail the job if there are test failures
      - name: Fail if tests failed
        if: always()
        run: |
          COMPONENT_RESULTS=$(cat cypress/reports/component/mochawesome.json)
          E2E_RESULTS=$(cat cypress/reports/e2e/mochawesome.json)

          COMPONENT_FAILED=$(echo $COMPONENT_RESULTS | jq '.stats.failures')
          E2E_FAILED=$(echo $E2E_RESULTS | jq '.stats.failures')

          TOTAL_FAILED=$((COMPONENT_FAILED + E2E_FAILED))

          if [ "$TOTAL_FAILED" -gt 0 ]; then
            echo "Tests failed: $TOTAL_FAILED ‚ùå"
            exit 1
          else
            echo "All tests passed ‚úÖ"
          fi
